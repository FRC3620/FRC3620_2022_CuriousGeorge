import edu.wpi.first.gradlerio.deploy.roborio.RoboRIO

// debug this by doing 
// ./gradlew --console=plain :build 
// in VSCode terminal

plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2022.3.1"
    id "com.gorylenko.gradle-git-properties" version "2.3.2"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "frc.robot.Main"

test {
    filter {
        // https://stackoverflow.com/a/52879530/17887564
        setFailOnNoMatchingTests(false)

        // run this if nothing else so only this runs
        // includeTestsMatching 'DummyTest'

        // includeTestsMatching 'SwerveCalcTest'

        // includeTestsMatching 'RobotParametersTest'
        includeTestsMatching 'RobotParameters2022Test'

        includeTestsMatching 'ShooterCalculatorTest'
    }
}

// this helps junit test results show up in output
// look at https://stackoverflow.com/a/36130467/17887564 for some more suggestions
tasks.withType(Test) { 
  testLogging {
    exceptionFormat "full"
    // events "passed", "failed" // , "started", "skipped"
    showStandardStreams true
    showExceptions true
  }
}

task printGitProperties {
    dependsOn generateGitProperties
    doLast {
        println "Project: " + project.ext.gitProps["project.dir"]
        println "Branch: " + project.ext.gitProps["git.branch"]
        println "Describe: " + project.ext.gitProps["git.commit.id.describe"]
        println "Dirty: "  + project.ext.gitProps["git.dirty"]
        println "Build time: " + project.ext.gitProps["build.time"]
        println "Build host: " + project.ext.gitProps["git.build.host"]
    }
}

def getBuildTime() {
    return new Date().toString();
}

gitProperties {
    // Customize directory using gitPropertiesResourceDir config
    // The directory in this config key is also added as a classpath entry
    // (so the git.properties file will be included in the final JAR file)
    customProperty "build.time", { getBuildTime() }
    customProperty "project.dir", { project.projectDir.getName() }
    customProperty 'git.commit.id.describe', { it.describe(tags: true, always: true) } 
    gitPropertiesResourceDir = file("${project.rootDir}/src/main/deploy")
    extProperty = 'gitProps'
}
generateGitProperties.finalizedBy printGitProperties // make sure we do things in the correct order
generateGitProperties.outputs.upToDateWhen { false } // make sure the generateGitProperties task always executes (even when git.properties is not changed)

tasks.processResources.dependsOn generateGitProperties // make sure we do things in the correct order
// https://stackoverflow.com/a/70648216/17887564
tasks.processResources.outputs.upToDateWhen { false }  // make sure the processResources task always runs

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    implementation 'com.google.code.gson:gson:2.8.9'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.32'
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-jdk14
    implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.32'

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'junit:junit:4.12'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)
